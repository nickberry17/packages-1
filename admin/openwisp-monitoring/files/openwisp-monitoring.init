#!/bin/sh /etc/rc.common

USE_PROCD=1

START=98
STOP=01

append_string() {
	varname="$1"
	add="$2"
	separator="${3:- }"
	actual
	eval "actual=\$$varname"

	new="${actual:+$actual$separator}$add"
	eval "$varname=\$new"
}

time_to_seconds() {
	time=$1

	{ [ "$time" -ge 1 ] 2>/dev/null && seconds="$time"; } ||
		{ [ "${time%s}" -ge 1 ] 2>/dev/null && seconds="${time%s}"; } ||
		{ [ "${time%m}" -ge 1 ] 2>/dev/null && seconds=$((${time%m} * 60)); } ||
		{ [ "${time%h}" -ge 1 ] 2>/dev/null && seconds=$((${time%h} * 3600)); } ||
		{ [ "${time%d}" -ge 1 ] 2>/dev/null && seconds=$((${time%d} * 86400)); }

	echo $seconds
	unset seconds
	unset time
}

config_openwisp-monitoring() {
	# Read config
    config_get interval "$1" "5m"
    config_get uuid "$1" uuid
    config_get key "$1" key
    config_get base_url "$1"
    config_get_bool verify_ssl "$1" "1"
    config_get monitored_interfaces "$1" "br-lan tun0"

	# Checks for settings common to all operation modes

	interval="$(time_to_seconds "$interval")"
	[ "$interval" -ge 1 ] ||
		append_string "error" "interval has invalid format. Use time value(ex: '30'; '4m'; '6h'; '2d')" "; "

	[ -n "$warn" ] && logger -p user.warn -t "openwisp-monitoring" "$1: $warn"
	[ -n "$error" ] && {
		logger -p user.err -t "openwisp-monitoring" "program $1 not started - $error"
		return
	}
	
    procd_open_instance "openwisp-monitoring_${1}"
    procd_set_param command /usr/sbin/openwisp-monitoring.sh "$uuid" "$key" "$base_url" "$verify_ssl" "$monitored_interfaces"
	procd_set_param respawn ${respawn_threshold:-3600} ${respawn_timeout:-5} ${respawn_retry:-5}
    procd_close_instance
}

start_service() {
	config_load openwisp-monitoring
	config_foreach config_openwisp-monitoring openwisp-monitoring
}

service_triggers() {
	procd_add_reload_trigger "openwisp-monitoring"
}
