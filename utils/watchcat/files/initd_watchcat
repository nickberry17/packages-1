#!/bin/sh /etc/rc.common

START=97

PIDFILE="/tmp/run/watchcat"

append_string() {
	local varname="$1"; local add="$2"; local separator="${3:- }"; local actual
	eval "actual=\$$varname"

	new="${actual:+$actual$separator}$add"
	eval "$varname=\$new"
}

timetoseconds() {
	local time=$1
	unset seconds

	{ [ "$time" -ge 1 ] 2> /dev/null && seconds="$time"; } || \
	{ [ "${time%s}" -ge 1 ] 2> /dev/null && seconds="${time%s}"; } || \
	{ [ "${time%m}" -ge 1 ] 2> /dev/null && seconds=$((${time%m}*60)); } || \
	{ [ "${time%h}" -ge 1 ] 2> /dev/null && seconds=$((${time%h}*3600)); } || \
	{ [ "${time%d}" -ge 1 ] 2> /dev/null && seconds=$((${time%d}*86400)); }
}

load_watchcat() {
	config_get period			$1 period
	config_get mode				$1 mode			"ping_reboot"
	config_get ping_hosts		$1 ping_hosts	"8.8.8.8"
	config_get ping_period		$1 ping_period
	config_get forcedelay		$1 forcedelay	"0"
	config_get ping_size		$1 ping_size	"standard"
	config_get interface		$1 interface
	config_get mm_iface_name	$1 mm_iface_name


	# Fix potential typo in mode and provide backward compatibility.
	[ "$mode" = "allways" ] && mode="periodic_reboot"
	[ "$mode" = "always" ] && mode="periodic_reboot"
	[ "$mode" = "ping" ] && mode="ping_reboot"

	error=""

	timetoseconds "$period"
	period="$seconds"
	[ "$period" -ge 1 ] \
		|| append_string "error" 'period is not a valid time value (ex: "30"; "4m"; "6h"; "2d")' "; "
	[ "$mode" = "periodic_reboot" -o "$mode" = "ping_reboot" -o "$mode" = "restart_iface" ] \
		|| append_string "error" "mode must be 'periodic_reboot' or 'ping_reboot' or 'restart_iface'" "; "
	[ -n "$ping_hosts" -o "$mode" = "periodic_reboot" ] \
		|| append_string "error" "ping_hosts must be set when in 'ping_reboot' mode" "; "
	[ "$mode" = "ping_reboot" -o "$mode" = "restart_iface" ] && {
		if [ -n "$ping_period" ]
		then
			timetoseconds "$ping_period"
			ping_period="$seconds"
			if [ "$ping_period" -ge 0 ]
			then
				[ "$ping_period" -lt "$period" ] \
					|| append_string "error" "ping_period must be less than period" "; "
			else
				append_string "error" 'ping_period is not a valid time value (e.g.: "30"; "4m"; "6h"; "2d")' "; "
			fi
		else
			ping_period="$((period/20))"
		fi

	[ -z "$mm_iface_name" -a "$period" -lt 30 ] \
		&& append_string "error" "ping period less than 30. For robust operation with ModemManager modem interfaces it is recommended to set the period to at least 30s."
		
	}
	[ "$forcedelay" -ge 0 ] \
		|| append_string "error" "forcedelay must be a integer greater or equal than 0, where 0 means disabled" "; "

	[ -n "$error" ] && { logger -p user.err -t "watchcat" "reboot program $1 not started - $error"; return; }

	case "$mode" in
	periodic_reboot)
		/usr/bin/watchcat.sh "periodic_reboot" "$period" "$forcedelay" &
		logger -p user.info -t "watchcat" "started task (mode=$mode;period=$period;forcedelay=$forcedelay)"
		;;
	ping_reboot)
		/usr/bin/watchcat.sh "ping_reboot" "$period" "$forcedelay" "$ping_hosts" "$ping_period" "$ping_size" &
		logger -p user.info -t "watchcat" "started task (mode=$mode;period=$period;ping_hosts=$ping_hosts;ping_period=$ping_period;forcedelay=$forcedelay)"
		;;
	restart_iface)
		/usr/bin/watchcat.sh "restart_iface" "$period" "$forcedelay" "$ping_hosts" "$ping_period" "$ping_size" "$interface" "$mm_iface_name" &
		logger -p user.info -t "watchcat" "started task (mode=$mode;period=$period;ping_hosts=$ping_hosts;ping_period=$ping_period;ping_size="$ping_size";interface="$interface";mm_iface_name="$mm_iface_name")"
		;;
	*)
		echo "Error starting Watchcat service."
		;;
	esac

	echo $! >> "${PIDFILE}.pids"
}

stop() {
	if [ -f "${PIDFILE}.pids" ]
	then
		logger -p user.info -t "watchcat" "stopping all tasks"

		while read pid
		do
			kill -KILL "$pid"
		done < "${PIDFILE}.pids"

		rm "${PIDFILE}.pids"

		logger -p user.info -t "watchcat" "all tasks stopped"
	else
		logger -p user.info -t "watchcat" "no tasks running"
	fi
}

start() {
	[ -f "${PIDFILE}.pids" ] && stop

	config_load system
	if [ -n "$(uci show system.@watchcat[0])" ] # at least one watchcat section exists
	then
		logger -p user.info -t "watchcat" "starting all tasks"
		config_foreach load_watchcat watchcat
		logger -p user.info -t "watchcat" "all tasks started"
	else
		logger -p user.info -t "watchcat" "no tasks defined"
	fi
}
