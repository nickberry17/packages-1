#!/bin/sh /etc/rc.common

START=97

PIDFILE="/tmp/run/watchcat"

append_string() {
	local varname="$1"
	local add="$2"
	local separator="${3:- }"
	local actual
	eval "actual=\$$varname"

	new="${actual:+$actual$separator}$add"
	eval "$varname=\$new"
}

time_to_seconds() {
	local time=$1
	unset seconds

	{ [ "$time" -ge 1 ] 2>/dev/null && seconds="$time"; } ||
		{ [ "${time%s}" -ge 1 ] 2>/dev/null && seconds="${time%s}"; } ||
		{ [ "${time%m}" -ge 1 ] 2>/dev/null && seconds=$((${time%m} * 60)); } ||
		{ [ "${time%h}" -ge 1 ] 2>/dev/null && seconds=$((${time%h} * 3600)); } ||
		{ [ "${time%d}" -ge 1 ] 2>/dev/null && seconds=$((${time%d} * 86400)); }
}

load_watchcat() {
	config_get period $1 period
	config_get mode $1 mode
	config_get pinghosts $1 pinghosts
	config_get pingperiod $1 pingperiod
	config_get nopingtime $1 nopingtime
	config_get forcedelay $1 forcedelay
	config_get pingsize $1 pingsize
	config_get interface $1 interface
	config_get mmifacename $1 mmifacename
	config_get mmifaceunlockbands $1 mmifaceunlockbands

	local nopingtime_default="21600"
	local forcedelay_default="60"
	local pingsize_default="standard"
	local mmifaceunlockbands_default="0"

	# Fix potential typo in mode and provide backward compatibility.
	[ "$mode" = "allways" ] && mode="periodic_reboot"
	[ "$mode" = "always" ] && mode="periodic_reboot"
	[ "$mode" = "ping" ] && mode="ping_reboot"

	error=""
	warn=""

	if [ -z "$period" ]; then
		append_string "error" "period is not set! Use time value(ex: '30'; '4m'; '6h'; '2d')." "; "
	else
		time_to_seconds "$period"
		period="$seconds"
		[ "$period" -ge 1 ] ||
			append_string "error" "period has invalid format! Use time value(ex: '30'; '4m'; '6h'; '2d')" "; "
	fi

	[ "$mode" = "periodic_reboot" -o "$mode" = "ping_reboot" -o "$mode" = "restart_iface" ] ||
		append_string "error" "mode must be 'periodic_reboot' or 'ping_reboot' or 'restart_iface'" "; "

	[ -n "$pinghosts" ] ||
		append_string "error" "pinghosts must be set when in 'ping_reboot' or 'restart_iface' mode" "; "

	if [ -z "$forcedelay" ]; then
		forcedelay="$forcedelay_default"
		append_string "warn" "forcedelay is not configured! Defaulted to $forcedelay_default seconds" "; "
	else
		[ "$forcedelay" -ge 0 ] || {
			forcedelay="$forcedelay_default"
			append_string "warn" "forcedelay is invalid! Defaulted to $forcedelay_default seconds" "; "
		}
	fi

	if [ -z "$pingsize" ]; then
		pingsize="$pingsize_default"
		append_string "warn" "pingsize is not configured! Defaulted to $pingsize_default ping packet size" "; "
	fi

	if [ -z "$mmifaceunlockbands" ]; then
		mmifaceunlockbands="$mmifaceunlockbands_default"
		append_string "warn" "mmifaceunlockbands is not configured! Defaulted to $mmifaceunlockbands_default " "; "
	fi

	[ -z "$error" -a "$mode" = "ping_reboot" -o "$mode" = "restart_iface" ] && {
		[ -z "$pinghosts" ] &&
			append_string "error" "pinghosts must be set in 'ping_reboot' mode! Use space separated address list (ex: '8.8.8.8 9.9.9.9')" "; "

		if [ -z "$nopingtime" ]; then
			nopingtime="$nopingtime_default"
			append_string "warn" "nopingtime is not configured! Defaulted to $nopingtime_default seconds" "; "
		else
			time_to_seconds "$nopingtime"
			nopingtime="$seconds"
			[ "$nopingtime" -ge 0 ] || {
				nopingtime="$nopingtime"
				append_string "warn" "nopingtime invalid format! Use time value(ex: '30'; '4m'; '6h'; '2d'). Defaulted to $nopingtime_default seconds" "; "
			}
		fi

		local pingperiod_default="$((period / 5))"

		if [ -z "$pingperiod" ]; then
			pingperiod="$pingperiod_default"
			append_string "warn" "pingperiod is not configured! Defaulted to $pingperiod_default seconds(1/5 of period)" "; "
		else
			time_to_seconds "$pingperiod"
			pingperiod="$seconds"
			[ "$pingperiod" -ge 0 -a "$pingperiod" -ge "$period" ] && {
				pingperiod="$pingperiod_default"
				append_string "warn" "pingperiod is invalid value(greater than period)! Defaulted to $pingperiod_default seconds(1/5 of period)" "; "
			}
			[ "$pingperiod" -ge 0 ] || {
				pingperiod="$pingperiod_default"
				append_string "warn" "pingperiod has invalid format! Use time value(ex: '30'; '4m'; '6h'; '2d'). Defaulted to $pingperiod_default seconds(1/5 of period)" "; "
			}
		fi

		[ -z "$mmifacename" -a "$period" -lt 30 ] && {
			append_string "error" "Check interval is less than 30s. For robust operation with ModemManager modem interfaces it is recommended to set the period to at least 30s."
		}
	}

	[ -n "$warn" ] && logger -p user.warn -t "watchcat" "$1: $warn"
	[ -n "$error" ] && {
		logger -p user.err -t "watchcat" "reboot program $1 not started - $error"
		return
	}

	case "$mode" in
	periodic_reboot)
		/usr/bin/watchcat.sh "periodic_reboot" "$period" "$forcedelay" &
		logger -p user.info -t "watchcat" "started task (mode=$mode;period=$period;forcedelay=$forcedelay)"
		;;
	ping_reboot)
		/usr/bin/watchcat.sh "ping_reboot" "$period" "$forcedelay" "$pinghosts" "$pingperiod" "$nopingtime" "$pingsize" &
		logger -p user.info -t "watchcat" "started task (mode=$mode;period=$period;pinghosts=$pinghosts;pingperiod=$pingperiod;forcedelay=$forcedelay;nopingtime=$nopingtime;pingsize=$pingsize)"
		;;
	restart_iface)
		/usr/bin/watchcat.sh "restart_iface" "$period" "$forcedelay" "$pinghosts" "$pingperiod" "$nopingtime" "$pingsize" "$interface" "$mmifacename" &
		logger -p user.info -t "watchcat" "started task (mode=$mode;period=$period;pinghosts=$pinghosts;pingperiod=$pingperiod;nopingtime="$nopingtime";pingsize="$pingsize";interface="$interface";mmifacename="$mmifacename";mmifaceunlockbands=$mmifaceunlockbands)"
		;;
	*)
		echo "Error starting Watchcat service. Invalid mode selection: $mode"
		;;
	esac

	echo $! >>"${PIDFILE}.pids"
}

stop() {
	if [ -f "${PIDFILE}.pids" ]; then
		logger -p user.info -t "watchcat" "stopping all tasks"

		while read pid; do
			kill -KILL "$pid"
		done <"${PIDFILE}.pids"

		rm "${PIDFILE}.pids"

		logger -p user.info -t "watchcat" "all tasks stopped"
	else
		logger -p user.info -t "watchcat" "no tasks running"
	fi
}

start() {
	[ -f "${PIDFILE}.pids" ] && stop

	config_load system
	if [ -n "$(uci show system.@watchcat[0])" ]; then # at least one watchcat section exists
		logger -p user.info -t "watchcat" "starting all tasks"
		config_foreach load_watchcat watchcat
		logger -p user.info -t "watchcat" "all tasks started"
	else
		logger -p user.info -t "watchcat" "no tasks defined"
	fi
}
